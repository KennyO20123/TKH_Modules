1) A computer is translating a signal to its system to interpret what I am typing on the keyboard.  In order for the computer to understand it, it has to access an image out of its memory that can be seen on the screen.  It is a process that involves translating lines and circles into the image of a letter.
2) Computers use input and output to create experiences by taking what the user gives to it and sending its anticipated response back.  Computers take the code that is given and transform it to other types of code by understanding the characters in the code.  From there it is a continuation of dialogue between user and computer to create images, letters etc.
3) Software products are considered infinitely reproducible nothings because software is something that will continually be needed just to keep up with more incoming generated data.  Technically you can say the data is the “nothing" that will continue to be infinite and more software products are produced that handle that issue.
4) Code becomes software by being converted into a language that the computer can then interpret and use to distribute through out its framework as well as other systems.  The computer understands this language through characters (such as semicolons) and where they are placed in the code.  This can then be turned into a function which can be repeated over and over then in turn become strings and arrays.
5) Algorithms solve problems.  The purpose of a programming language is to manage an algorithm.  Algorithms are capable of doing many things based on the compilation of information they store in their databases.  In a way, algorithms are what makes a computer know and understand the user.
6) The DRY principle, an acronym for Don’t Repeat Yourself, basically is for the user to perform a task once then allow the computer to be responsible for repeating those tasks like a recorded entry that can be used over again.
7) Object oriented programming simply put is like a filling cabinet for code making it easily accessible to organize data like in a library, where you can add and build upon something like a pre existing project.  Python being an example of this since it is based off of Java.
8) Data, which are files, can come from a user, computer or outside party.  Code is a way of solving problems that can result from too much data.  Since there is much data, there requires more programming in order to keep up with it.  Data is what gives code purpose so they therefore both need each other.
9) Frameworks provide solutions for development problems by saving programmers time from having to solve reoccurring issues that tend to come up because they are built on pre existing data.  Thus making  tasks  like entering e-mail address or creating a web application easier for programmers.
10) Debugging is the expectation of problems that will come up during coding.  It is basically the primary function of programming.  It’s the fixing of an issue and how to be properly prepared to handle it when it arises.


11) I want to learn how to code because it is about creation, creating solutions to problems.  It’s exciting and will allow me to have a skill that is irreplaceable.  A skill that will always be in demand and relevant.  Coding also opens doors to so many different avenues to where I can take my career and be of assistance to many different outlets.  From creating websites to applications that engage and interact with users, it is technically the skill of the future.  I can take my experiences from coding and continue to build on them, to learn new languages, work on a vast variety of projects and to keep learning along the way.